name: Release

on:
  push:
    tags:
      - "v*"

env:
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  CARGO_TERM_COLOR: always

  DOCKER_REGISTRY: ghcr.io

  GOMPLATE_VERSION: v4.3.1
  GOMPLATE: gomplate_linux-amd64
  GOMPLATE_URL: https://github.com/hairyhenderson/gomplate/releases/download

  RUST_BACKTRACE: full

  # Set this to true for CI testing purposes only.
  SKIP_BUILD: false

jobs:
  build-nodes:
    name: Build nodes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node:
          - features: darwinia-runtime,crab-runtime
            bz2: true
          - features: darwinia-runtime,crab-runtime,evm-tracing
            type: tracing
    steps:
      - name: Free disk space
        if: ${{ env.SKIP_BUILD != 'true' }}
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: false
      - name: Set swap space
        if: ${{ env.SKIP_BUILD != 'true' }}
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 8
      - name: Fetch latest code
        uses: actions/checkout@v4
      - name: Build node
        uses: ./.github/actions/build
        with:
          features: ${{ matrix.node.features }}
          suffix: ${{ matrix.node.type }}
          enable_tar_bz2: ${{ matrix.node.bz2 }}
          skip-build: ${{ env.SKIP_BUILD }}
      - name: Upload node
        uses: actions/upload-artifact@v4
        with:
          name: darwinia${{ matrix.node.type != '' && format('-{0}', matrix.node.type) || '' }}
          path: build
          retention-days: 1
      - name: Fail fast
        uses: vishnudxb/cancel-workflow@v1.2
        if: failure()
        with:
          repo: darwinia-network/darwinia
          workflow_id: ${{ github.run_id }}
          access_token: ${{ github.token }}

  build-runtimes:
    name: Build runtimes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        runtime: [darwinia, crab]
    steps:
      - name: Fetch latest code
        uses: actions/checkout@v4
      - name: Setup gomplate
        run: |
          curl -LO ${{ env.GOMPLATE_URL }}/${{ env.GOMPLATE_VERSION }}/${{ env.GOMPLATE }}
          chmod u+x ${{ env.GOMPLATE }}
          sudo mv ${{ env.GOMPLATE }} /usr/bin/gomplate
      - name: Setup wuh
        run: |
          curl -LO https://github.com/darwinia-network/darwinia-release/releases/download/v0.1.0/wuh.zst
          zstd -d wuh.zst
          chmod u+x ./wuh
          sudo mv ./wuh /usr/bin/wuh
      - name: Build runtime
        # It is recommended to use a specific version of the action in production.
        #
        # For example:
        # uses: hack-ink/polkadot-runtime-releaser/action/build@vX.Y.Z
        uses: hack-ink/polkadot-runtime-releaser/action/build@v0.2.0
        with:
          # The target runtime to build.
          #
          # For example, `polkadot-runtime` or `staging-kusama-runtime`.
          runtime: ${{ matrix.runtime }}-runtime
          # The features to enable for this release build.
          #
          # Generally, this would be `on-chain-release-build` in order to disable the logging to shrink the WASM binary size.
          features: on-chain-release-build
          # Rust toolchain version to build the runtime.
          toolchain-ver: 1.81.0
          # The workdir to build the runtime.
          #
          # By default, it is current directory.
          # workdir: .
          # The output directory of the WASM binary.
          output-dir: .
      - name: Prepare runtime
        run: |
          SKIP_BUILD=${{ env.SKIP_BUILD }}

          # Template will use this env var.
          export RUNTIME=${{ matrix.runtime }}

          mkdir -p build

          if [ "$SKIP_BUILD" == "true" ]; then
            echo SKIP_BUILD > build/${RUNTIME}.wasm
            echo SKIP_BUILD > build/runtime.md
          else
            WHITELIST_PALLET_INDEX=0x33
            if [ "$RUNTIME" == "crab" ]; then
              WHITELIST_PALLET_INDEX=0x2f
            fi
            WASM=$(ls ${RUNTIME}*.wasm)
            # Template will use this env var.
            export WHITELIST_HASH=$(wuh ${WASM} ${WHITELIST_PALLET_INDEX} 0x01)

            mv ${WASM} build/

            DIGEST=$(ls ${RUNTIME}*.json)

            cat .github/note-template/runtime.md \
              | gomplate -d prr=${DIGEST} \
              > build/runtime.md
          fi
      - name: Upload ${{ matrix.runtime }} runtime
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.runtime }}-runtime
          path: build
          retention-days: 1
      - name: Fail fast
        uses: vishnudxb/cancel-workflow@v1.2
        if: failure()
        with:
          repo: darwinia-network/darwinia
          workflow_id: ${{ github.run_id }}
          access_token: ${{ github.token }}

  publish-docker-image:
    name: Publish Docker image
    runs-on: ubuntu-latest
    needs: [build-nodes]
    steps:
      - name: Fetch Dockerfile
        uses: actions/checkout@v4
      - name: Download node
        uses: actions/download-artifact@v4
      - name: Extract node
        run: |
          mkdir -p dist
          tar -xvf darwinia/darwinia-x86_64-linux-gnu.tar.bz2 -C dist/
      - name: Tag
        uses: olegtarasov/get-tag@v2.1
      - name: Sha
        uses: benjlevesque/short-sha@v3.0
      - name: Docker login
        if: ${{ env.SKIP_BUILD != 'true' }}
        uses: docker/login-action@v3
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ${{ env.DOCKER_REGISTRY }}
      - name: Publish
        if: ${{ env.SKIP_BUILD != 'true' }}
        uses: docker/build-push-action@v5
        with:
          push: true
          context: .
          file: .maintain/docker/Dockerfile
          tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:sha-${{ env.SHA }}
      - name: Publish with tag
        if: ${{ env.SKIP_BUILD != 'true' }}
        uses: docker/build-push-action@v5
        with:
          push: true
          context: .
          file: .maintain/docker/Dockerfile
          tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:${{ env.GIT_TAG_NAME }}

  publish-github-release:
    name: Publish GitHub release
    runs-on: ubuntu-latest
    needs: [build-nodes, build-runtimes, publish-docker-image]
    steps:
      - name: Fetch note template
        uses: actions/checkout@v4
      - name: Download nodes and runtimes
        uses: actions/download-artifact@v4
      - name: Prepare nodes and runtimes
        run: |
          mkdir -p deploy
          mv *runtime/*.wasm deploy/
          mv darwinia/*.tar.* deploy/
          mv darwinia-tracing/*.tar.* deploy/
      - name: Setup gomplate
        run: |
          curl -LO ${{ env.GOMPLATE_URL }}/${{ env.GOMPLATE_VERSION }}/${{ env.GOMPLATE }}
          chmod u+x ${{ env.GOMPLATE }}
          sudo mv ${{ env.GOMPLATE }} /usr/bin/gomplate
      - name: Tag
        uses: olegtarasov/get-tag@v2.1
      - name: Sha
        uses: benjlevesque/short-sha@v3.0
      - name: Prepare note
        run: |
          export RELEASE_SCHEMA='{"tag":"'$GIT_TAG_NAME'","sha":"'$SHA'"}'
          cat .github/note-template/node.md \
            | gomplate -d schema='env:/RELEASE_SCHEMA?type=application/json' \
            > node.tmp.md
      - name: Fill note
        run: |
          cat darwinia-runtime/runtime.md >> node.md
          cat crab-runtime/runtime.md >> node.md
          cat node.tmp.md >> node.md
      - name: Hash file
        run: cd deploy && sha256sum * | tee sha256sums.txt
      # - name: Verify
      #   run: |
      #     set -xe
      #     cat node.md
      #     ls -la deploy/
      #     cat build/*.md
      - name: Publish
        uses: softprops/action-gh-release@v2
        with:
          body_path: "node.md"
          files: |
            deploy/*
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}
